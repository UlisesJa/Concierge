<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" />
  <title>Concierge Digital - Grand Fiesta Americana Querétaro</title>
  <style>
    :root{
      --accent:#06b6b4; --muted:#9fb0c2; --maxw:1200px;
      font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0;background:linear-gradient(180deg,#021026,#081a2b);color:#dff7fb}
    .wrap{max-width:var(--maxw);margin:12px auto;padding:14px}
    header{display:flex;align-items:center;justify-content:space-between}
    h1{font-size:22px;margin:0}
    .lead{color:var(--muted);margin:0;font-size:14px}
    .grid{display:grid;grid-template-columns:repeat(2,1fr);gap:16px;margin-top:12px}
    .tile{position:relative;height:200px;border-radius:12px;overflow:hidden;border:1px solid rgba(255,255,255,0.04);cursor:pointer}
    .tile .bg{position:absolute;inset:0;background-size:cover;background-position:center;filter:brightness(.45)}
    .tile .label{position:relative;z-index:2;padding:14px;color:#fff}
    .icon-btn{background:transparent;border:0;color:var(--muted);width:48px;height:48px;border-radius:10px;cursor:pointer}
    .modal-backdrop{position:fixed;inset:0;background:rgba(2,6,16,0.75);display:none;align-items:flex-end;justify-content:center;padding:12px;z-index:80}
    .modal{width:100%;max-width:1100px;background:linear-gradient(180deg,#04202c,#071a27);border-radius:12px;padding:16px;border:1px solid rgba(255,255,255,0.04);max-height:92vh;overflow:auto}
    .items-list{display:grid;grid-template-columns:repeat(2,1fr);gap:10px;margin-top:12px}
    .item-card{display:flex;gap:10px;background:rgba(255,255,255,0.02);padding:10px;border-radius:8px}
    .item-card img{width:150px;height:100px;object-fit:cover;border-radius:6px}
    .meta{color:var(--muted);font-size:13px;margin-top:6px}
    .btn{background:var(--accent);border:0;padding:8px 12px;border-radius:8px;color:#00383a;cursor:pointer;font-weight:700}
    .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
    .img-preview{width:150px;height:100px;object-fit:cover;border-radius:6px;border:1px solid rgba(255,255,255,0.03)}
    label{font-size:13px;color:var(--muted);display:block;margin-bottom:6px}
    input[type="text"], input[type="number"], textarea, select{width:100%;padding:8px;border-radius:6px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:inherit}
    textarea{min-height:80px}
    footer{color:var(--muted);font-size:13px;margin-top:12px}
    @media (max-width:900px){ .items-list{grid-template-columns:1fr} .grid{grid-template-columns:1fr} }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div>
        <h1>Concierge Digital — Grand Fiesta Americana Querétaro</h1>
        <div class="lead">Administración únicamente desde Configuración. Imágenes subidas se guardan en el navegador.</div>
      </div>
      <div>
        <button id="btn-config" class="icon-btn" aria-label="Configuración">⚙️</button>
      </div>
    </header>

    <main>
      <section>
        <div class="grid" id="main-grid" aria-label="Secciones principales"></div>
      </section>
    </main>

    <footer>Demo.</footer>
  </div>

  <!-- Section Modal (list of items) -->
  <div id="modal-section" class="modal-backdrop" aria-hidden="true">
    <div class="modal" role="dialog" aria-modal="true">
      <header style="display:flex;justify-content:space-between;align-items:center">
        <div>
          <h2 id="modal-title" style="margin:0">Sección</h2>
          <div id="modal-desc" style="color:var(--muted);font-size:13px"></div>
        </div>
        <div><button id="modal-close" class="btn.ghost">Cerrar</button></div>
      </header>

      <div id="items-area">
        <div class="items-list" id="items-list"></div>
      </div>

      <!-- Hidden Add/Edit form (opened from Config -> Add/Edit) -->
      <div id="add-form-wrap" style="display:none;margin-top:12px">
        <h3 style="margin:8px 0">Añadir / Editar negocio</h3>
        <form id="add-form" onsubmit="return false" style="display:grid;grid-template-columns:1fr 260px;gap:12px">
          <div>
            <label>Nombre</label>
            <input id="f-name" type="text" required>
            <label style="margin-top:8px">Descripción</label>
            <textarea id="f-desc"></textarea>
            <div style="display:flex;gap:8px;margin-top:8px">
              <div style="flex:1">
                <label>Precio estimado</label>
                <input id="f-price" type="text" placeholder="$200 - $500">
              </div>
              <div style="width:120px">
                <label>Distancia (km)</label>
                <input id="f-distance" type="number" min="0" step="0.1">
              </div>
            </div>
            <label style="margin-top:8px">URL del negocio</label>
            <input id="f-url" type="text" placeholder="https://...">
          </div>

          <div>
            <label>Foto (URL o subir desde PC)</label>
            <input id="f-photo" type="text" placeholder="https://...">
            <div style="margin-top:6px;color:var(--muted);font-size:13px">O subir desde tu equipo:</div>
            <input id="f-photo-file" type="file" accept="image/*" style="margin-top:6px">
            <div style="margin-top:8px">
              <div style="font-size:13px;color:var(--muted)">Preview</div>
              <img id="f-photo-preview" class="img-preview" src="" alt="Preview foto">
            </div>
            <div style="display:flex;gap:8px;margin-top:10px">
              <button id="f-save" class="btn">Guardar</button>
              <button id="f-cancel" class="btn ghost">Cancelar</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Config Modal -->
  <div id="modal-config" class="modal-backdrop" aria-hidden="true">
    <div class="modal" role="dialog" aria-modal="true">
      <header style="display:flex;justify-content:space-between;align-items:center">
        <div>
          <h2 style="margin:0">Configuración</h2>
          <div style="color:var(--muted);font-size:13px">Acceso protegido</div>
        </div>
        <div><button id="config-close" class="btn.ghost">Cerrar</button></div>
      </header>

      <div style="margin-top:12px">
        <div id="pw-screen">
          <label class="small">Introduce contraseña</label>
          <div style="display:flex;gap:8px;margin-top:8px">
            <input id="pw-input" type="password" placeholder="Contraseña" style="flex:1;padding:8px;border-radius:6px">
            <button id="pw-submit" class="btn">Entrar</button>
          </div>
        </div>

        <div id="config-panel" style="display:none;margin-top:10px">
          <div style="display:flex;gap:8px;align-items:center">
            <label class="small">Sección</label>
            <select id="config-section-select" style="padding:8px;border-radius:6px"></select>
            <button id="config-add-open" class="btn">+ Añadir</button>
            <button id="config-export" class="btn ghost">Exportar JSON</button>
            <button id="config-import" class="btn ghost">Importar JSON</button>
          </div>

          <!-- Section image controls -->
          <div style="display:flex;gap:12px;align-items:center;margin-top:12px">
            <div style="flex:1">
              <div style="color:var(--muted);font-size:13px">Imagen de sección</div>
              <div style="display:flex;gap:8px;align-items:center;margin-top:8px">
                <input id="section-image-file" type="file" accept="image/*">
                <button id="section-image-save" class="btn ghost">Guardar imagen de sección</button>
                <button id="section-image-cancel" class="btn ghost">Cancelar</button>
                <button id="section-image-clear" class="btn ghost">Quitar</button>
              </div>
            </div>
            <div>
              <div style="color:var(--muted);font-size:13px">Preview</div>
              <img id="section-image-preview" class="img-preview" src="" alt="Preview sección">
            </div>
          </div>

          <div id="config-list" style="margin-top:12px"></div>

          <div id="import-area" style="display:none;margin-top:12px">
            <label class="small">Pegar JSON</label>
            <textarea id="import-json" style="width:100%;min-height:120px;margin-top:8px;border-radius:6px;padding:8px"></textarea>
            <div style="display:flex;gap:8px;margin-top:8px">
              <button id="import-do" class="btn">Importar</button>
              <button id="import-cancel" class="btn ghost">Cancelar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
/* -------------------------
   Storage & defaults
   ------------------------- */
const STORAGE_KEY = 'concierge_tablet_v5_2';
const DEFAULT_SECTIONS = [
  { key:'atractivos', title:'Atractivos Turísticos', img:'https://images.unsplash.com/photo-1501785888041-af3ef285b470' },
  { key:'festividades', title:'Festividades Locales', img:'https://images.unsplash.com/photo-1549298916-5c29840c0cff' },
  { key:'gastronomia', title:'Gastronomía Local', img:'https://images.unsplash.com/photo-1498654201522-298ff6fcaa53' },
  { key:'historia', title:'Historia de la Ciudad', img:'https://images.unsplash.com/photo-1505765052692-1c5f4f0b9b0d' },
  { key:'centros', title:'Centros de Consumo', img:'https://images.unsplash.com/photo-1503602642458-232111445657' },
  { key:'recomendaciones', title:'Recomendaciones', img:'https://images.unsplash.com/photo-1467269204594-9661b134dd2b' },
];

function genId(){ return 'it_' + Math.random().toString(36).slice(2,9); }

function sampleItem(base,i,sectionKey){
  return {
    id: genId(),
    name: `${base} ${i+1}`,
    photo: '', // encourage upload
    desc: `Descripción de ${base} ${i+1}`,
    price: '$100 - $300',
    distance_km: Math.round((Math.random()*30+0.1)*10)/10,
    url: 'https://ejemplo.com/' + sectionKey + '/' + (i+1)
  };
}

function loadData(){
  const raw = localStorage.getItem(STORAGE_KEY);
  if(!raw){
    const payload = {};
    DEFAULT_SECTIONS.forEach(s => payload[s.key] = { meta: {...s}, items: [] });
    DEFAULT_SECTIONS.forEach(s=>{
      for(let i=0;i<16;i++){
        const nameBase = {atractivos:'Atracción',festividades:'Evento',gastronomia:'Restaurante',historia:'Lugar Histórico',centros:'Centro',recomendaciones:'Recomendación'}[s.key] || 'Item';
        payload[s.key].items.push(sampleItem(nameBase,i,s.key));
      }
    });
    localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
    return payload;
  }
  try { return JSON.parse(raw); } catch(e){ localStorage.removeItem(STORAGE_KEY); return loadData(); }
}
function saveData(data){ localStorage.setItem(STORAGE_KEY, JSON.stringify(data)); }

/* -------------------------
   App state & refs
   ------------------------- */
let DATA = loadData();
let currentSectionKey = null;
let pendingSectionImageData = null;

const mainGrid = document.getElementById('main-grid');
const modalSection = document.getElementById('modal-section');
const modalTitle = document.getElementById('modal-title');
const modalDesc = document.getElementById('modal-desc');
const itemsList = document.getElementById('items-list');
const addFormWrap = document.getElementById('add-form-wrap');

const fName = document.getElementById('f-name');
const fPhoto = document.getElementById('f-photo');
const fPhotoFile = document.getElementById('f-photo-file');
const fPhotoPreview = document.getElementById('f-photo-preview');
const fDesc = document.getElementById('f-desc');
const fPrice = document.getElementById('f-price');
const fDistance = document.getElementById('f-distance');
const fUrl = document.getElementById('f-url');
const fSave = document.getElementById('f-save');
const fCancel = document.getElementById('f-cancel');

const btnConfig = document.getElementById('btn-config');
const modalConfig = document.getElementById('modal-config');
const pwInput = document.getElementById('pw-input');
const pwSubmit = document.getElementById('pw-submit');
const pwScreen = document.getElementById('pw-screen');
const configPanel = document.getElementById('config-panel');
const configSectionSelect = document.getElementById('config-section-select');
const configList = document.getElementById('config-list');

const sectionImageFile = document.getElementById('section-image-file');
const sectionImagePreview = document.getElementById('section-image-preview');
const sectionImageSave = document.getElementById('section-image-save');
const sectionImageCancel = document.getElementById('section-image-cancel');
const sectionImageClear = document.getElementById('section-image-clear');

const configAddOpen = document.getElementById('config-add-open');
const configExport = document.getElementById('config-export');
const configImport = document.getElementById('config-import');
const importArea = document.getElementById('import-area');
const importDo = document.getElementById('import-do');
const importCancel = document.getElementById('import-cancel');

/* -------------------------
   Render main tiles
   ------------------------- */
function renderTiles(){
  mainGrid.innerHTML = '';
  Object.keys(DATA).forEach(key=>{
    const s = DATA[key].meta;
    const count = DATA[key].items.length;
    const tile = document.createElement('button');
    tile.className = 'tile';
    const imgSrc = s.img || '';
    // use background-image with proper quoting
    tile.innerHTML = `<div class="bg" style="background-image:url('${imgSrc}');"></div>
      <div class="label"><div style="font-weight:800">${s.title}</div><div style="color:${varOr('#9fb0c2')}">${count} opciones</div></div>`;
    tile.addEventListener('click', ()=> openSectionModal(key));
    mainGrid.appendChild(tile);
  });
}

/* helper for consistent muted color in inline templates */
function varOr(fallback){ return 'var(--muted)'; }

/* -------------------------
   Section modal (list)
   ------------------------- */
function openSectionModal(key){
  currentSectionKey = key;
  const sec = DATA[key].meta;
  modalTitle.textContent = sec.title;
  modalDesc.textContent = `Explora ${sec.title}`;
  renderItemsForSection(key);
  addFormWrap.style.display = 'none';
  modalSection.style.display = 'flex';
  modalSection.setAttribute('aria-hidden','false');
  resetInactivityTimer();
}
function closeSectionModal(){ modalSection.style.display = 'none'; modalSection.setAttribute('aria-hidden','true'); currentSectionKey = null; clearAddFormFields(); }

document.getElementById('modal-close').addEventListener('click', ()=> closeSectionModal());

function renderItemsForSection(key){
  itemsList.innerHTML = '';
  const list = DATA[key].items || [];
  if(!list.length){ itemsList.innerHTML = '<div style="color:var(--muted)">No hay opciones.</div>'; return; }
  list.forEach(it=>{
    const card = document.createElement('div');
    card.className = 'item-card';
    const photo = it.photo || '';
    const photoSrc = photo || 'https://images.unsplash.com/photo-1504674900247-0877df9cc836';
    card.innerHTML = `<img src="${photoSrc}" alt="${escapeHtml(it.name)}">
      <div style="flex:1">
        <div style="font-weight:800">${escapeHtml(it.name)}</div>
        <div class="meta">${escapeHtml(it.desc||'')}</div>
        <div class="meta" style="margin-top:6px"><strong>Precio:</strong> ${escapeHtml(it.price||'—')} • <strong>Dist:</strong> ${it.distance_km ?? '—'} km</div>
        <div style="margin-top:8px"><a href="${it.url?it.url:'#'}" target="_blank" rel="noopener" style="color:var(--accent);font-weight:700">${it.url?'Más información':''}</a></div>
      </div>`;
    itemsList.appendChild(card);
  });
}

/* -------------------------
   Add / Edit item (file upload)
   ------------------------- */
fPhotoFile.addEventListener('change', (e)=>{
  const file = e.target.files && e.target.files[0];
  if(!file) return;
  if(!file.type.startsWith('image/')){ alert('Selecciona una imagen válida'); return; }
  const reader = new FileReader();
  reader.onload = function(ev){ fPhoto.value = ev.target.result; fPhotoPreview.src = ev.target.result; };
  reader.readAsDataURL(file);
});
fPhoto.addEventListener('input', ()=> fPhotoPreview.src = fPhoto.value || '');

function openAddForm(edit=false, id=null){
  if(!currentSectionKey){ alert('Abre la sección desde Configuración para agregar o editar.'); return; }
  addFormWrap.style.display = 'block';
  fPhotoPreview.src = '';
  fPhotoFile.value = '';
  if(edit && id){
    const item = DATA[currentSectionKey].items.find(i=>i.id===id);
    if(!item) return;
    fName.value = item.name || '';
    fPhoto.value = item.photo || '';
    fPhotoPreview.src = item.photo || '';
    fDesc.value = item.desc || '';
    fPrice.value = item.price || '';
    fDistance.value = item.distance_km ?? '';
    fUrl.value = item.url || '';
    addFormWrap.dataset.editId = id;
  } else {
    delete addFormWrap.dataset.editId;
    clearAddFormFields();
  }
}

fCancel.addEventListener('click', (e)=> { e.preventDefault(); addFormWrap.style.display='none'; clearAddFormFields(); });

function clearAddFormFields(){
  fName.value = ''; fPhoto.value = ''; fDesc.value = ''; fPrice.value = ''; fDistance.value = ''; fUrl.value = '';
  fPhotoPreview.src = ''; fPhotoFile.value = '';
}

fSave.addEventListener('click', (e)=>{
  e.preventDefault();
  if(!currentSectionKey){ alert('Sección no seleccionada'); return; }
  const name = fName.value.trim(); if(!name){ alert('Indica nombre'); return; }
  const photo = fPhoto.value.trim();
  const desc = fDesc.value.trim();
  const price = fPrice.value.trim();
  const distance = fDistance.value !== '' ? parseFloat(fDistance.value) : null;
  const url = fUrl.value.trim();

  const editId = addFormWrap.dataset.editId;
  if(editId){
    const idx = DATA[currentSectionKey].items.findIndex(i=>i.id===editId);
    if(idx>=0){
      DATA[currentSectionKey].items[idx] = { ...DATA[currentSectionKey].items[idx], name, photo, desc, price, distance_km: distance, url };
    }
  } else {
    DATA[currentSectionKey].items.push({ id: genId(), name, photo, desc, price, distance_km: distance, url });
  }
  saveData(DATA);
  renderTiles();
  renderItemsForSection(currentSectionKey);
  addFormWrap.style.display = 'none';
  clearAddFormFields();
  alert('Negocio guardado.');
});

/* -------------------------
   Config modal & section image flow
   ------------------------- */
btnConfig.addEventListener('click', openConfigModal);
document.getElementById('config-close').addEventListener('click', closeConfigModal);

function openConfigModal(){
  modalConfig.style.display = 'flex';
  modalConfig.setAttribute('aria-hidden','false');
  pwScreen.style.display = 'block'; configPanel.style.display = 'none';
  pwInput.value = ''; pwInput.focus();
  resetInactivityTimer();
}
function closeConfigModal(){ modalConfig.style.display = 'none'; modalConfig.setAttribute('aria-hidden','true'); }

pwSubmit.addEventListener('click', ()=>{
  if(pwInput.value === '1234'){
    pwScreen.style.display = 'none';
    configPanel.style.display = 'block';
    populateConfigSections();
  } else alert('Contraseña incorrecta');
});

function populateConfigSections(){
  configSectionSelect.innerHTML = '';
  Object.keys(DATA).forEach(k=>{
    const opt = document.createElement('option'); opt.value = k; opt.textContent = DATA[k].meta.title;
    configSectionSelect.appendChild(opt);
  });
  configSectionSelect.onchange = ()=> renderConfigList(configSectionSelect.value);
  renderConfigList(configSectionSelect.value);
}

/* renderConfigList (shows items and section preview; important: not overwritten) */
function renderConfigList(sectionKey){
  if(!sectionKey) return;
  configList.innerHTML = '';
  const sec = DATA[sectionKey].meta;
  sectionImagePreview.src = sec.img || '';
  pendingSectionImageData = null;
  sectionImageFile.value = '';

  const items = DATA[sectionKey].items || [];
  if(items.length === 0){ configList.innerHTML = '<div style="color:var(--muted)">No hay items.</div>'; return; }

  items.forEach(it=>{
    const row = document.createElement('div');
    row.style.display='flex'; row.style.justifyContent='space-between'; row.style.alignItems='center';
    row.style.padding='8px'; row.style.marginBottom='6px'; row.style.borderRadius='8px'; row.style.background='rgba(255,255,255,0.01)';
    row.innerHTML = `<div style="display:flex;gap:10px;align-items:center">
        <img src="${it.photo||'https://images.unsplash.com/photo-1504674900247-0877df9cc836'}" style="width:80px;height:56px;object-fit:cover;border-radius:6px">
        <div>
          <div style="font-weight:800">${escapeHtml(it.name)}</div>
          <div style="color:var(--muted);font-size:13px">${escapeHtml(it.desc||'')}</div>
          <div style="color:var(--muted);font-size:12px;margin-top:4px">${it.url?('URL: '+escapeHtml(it.url)) : ''}</div>
        </div>
      </div>
      <div style="display:flex;gap:8px">
        <button class="btn ghost" data-id="${it.id}" onclick="configEditItem(event)">Editar</button>
        <button class="btn" data-id="${it.id}" onclick="configDeleteItem(event)">Eliminar</button>
      </div>`;
    configList.appendChild(row);
  });
}

/* section image: preview pending, explicit save */
sectionImageFile.addEventListener('change', (e)=>{
  const file = e.target.files && e.target.files[0];
  if(!file) return alert('Selecciona una imagen válida');
  if(!file.type.startsWith('image/')) return alert('Selecciona una imagen válida');
  const reader = new FileReader();
  reader.onload = function(ev){ pendingSectionImageData = ev.target.result; sectionImagePreview.src = pendingSectionImageData; alert('Preview lista. Pulsa "Guardar imagen de sección" para confirmar.'); };
  reader.readAsDataURL(file);
});

sectionImageSave.addEventListener('click', ()=>{
  const secKey = configSectionSelect.value;
  if(!secKey) return alert('Selecciona una sección');
  if(!pendingSectionImageData) return alert('No hay imagen lista para guardar');
  DATA[secKey].meta.img = pendingSectionImageData;
  saveData(DATA);
  renderTiles();
  pendingSectionImageData = null;
  sectionImageFile.value = '';
  alert('Imagen de sección guardada.');
});
sectionImageCancel.addEventListener('click', ()=>{
  const secKey = configSectionSelect.value;
  sectionImagePreview.src = secKey ? (DATA[secKey].meta.img || '') : '';
  pendingSectionImageData = null;
  sectionImageFile.value = '';
});
sectionImageClear.addEventListener('click', ()=>{
  const secKey = configSectionSelect.value;
  if(!secKey) return;
  if(!confirm('Quitar imagen de sección y restaurar por defecto?')) return;
  const def = DEFAULT_SECTIONS.find(s=>s.key===secKey);
  DATA[secKey].meta.img = def ? def.img : '';
  saveData(DATA);
  renderTiles();
  sectionImagePreview.src = DATA[secKey].meta.img || '';
  alert('Imagen restaurada.');
});

/* Edit / Delete handlers used from config list */
window.configEditItem = function(ev){
  const id = ev.target.dataset.id; const secKey = configSectionSelect.value;
  if(!secKey) return;
  closeConfigModal();
  setTimeout(()=>{ currentSectionKey = secKey; openSectionModal(secKey); setTimeout(()=> openAddForm(true, id), 300); }, 200);
};
window.configDeleteItem = function(ev){
  const id = ev.target.dataset.id; const secKey = configSectionSelect.value;
  if(!secKey) return;
  if(!confirm('Eliminar este item?')) return;
  DATA[secKey].items = DATA[secKey].items.filter(i=>i.id !== id);
  saveData(DATA);
  renderTiles();
  renderConfigList(secKey);
  alert('Item eliminado.');
};

/* Add from Config */
configAddOpen.addEventListener('click', ()=>{
  const sec = configSectionSelect.value;
  if(!sec) return alert('Selecciona una sección');
  closeConfigModal();
  setTimeout(()=>{ currentSectionKey = sec; openSectionModal(sec); openAddForm(false); }, 200);
});

/* Export / Import JSON */
configExport.addEventListener('click', ()=>{
  const json = JSON.stringify(DATA, null, 2);
  const w = window.open('', '_blank'); w.document.write('<pre style="white-space:pre-wrap">'+escapeHtml(json)+'</pre>');
});
configImport.addEventListener('click', ()=> importArea.style.display = importArea.style.display === 'block' ? 'none' : 'block');
importCancel.addEventListener('click', ()=> importArea.style.display = 'none');
importDo.addEventListener('click', ()=>{
  const raw = document.getElementById('import-json').value.trim();
  if(!raw) return alert('Pega el JSON');
  try{
    const parsed = JSON.parse(raw);
    if(typeof parsed === 'object'){ DATA = parsed; saveData(DATA); renderTiles(); alert('Importado.'); }
    else alert('JSON inválido');
  }catch(e){ alert('JSON inválido: '+e.message); }
});

/* -------------------------
   Inactivity timer (40s)
   ------------------------- */
let inactivityTimeout = null;
const INACTIVITY_SECONDS = 40;
function startInactivityTimer(){ clearTimeout(inactivityTimeout); inactivityTimeout = setTimeout(()=>{ closeSectionModal(); closeConfigModal(); renderTiles(); }, INACTIVITY_SECONDS*1000); }
function resetInactivityTimer(){ startInactivityTimer(); }
['click','touchstart','mousemove','keydown','scroll'].forEach(evt=> document.addEventListener(evt, resetInactivityTimer, {passive:true}));
startInactivityTimer();

/* -------------------------
   Utilities & boot
   ------------------------- */
function escapeHtml(s){ if(!s && s !== 0) return ''; return String(s).replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
renderTiles();
</script>
</body>
</html>
